#include <sys/types.h>
#include <unistd.h>
#include <stdio.h>
#include <stdlib.h>

int main()
{
    // Массив для хранения файловых дескрипторов канала
    int    fd[2];
    // Переменная для хранения результата вызова функции fork
    int    result;
    // Переменная для хранения количества прочитанных или записанных байт
    size_t size;
    // Массив для хранения прочитанной строки
    char   resstring[14];

    // Создаем канал
    if(pipe(fd) < 0)
    {
        // Если создание канала не удалось, выводим сообщение об ошибке и завершаем программу
        printf("Can\'t open pipe\n");
        exit(-1);
    }

    // Создаем дочерний процесс
    result = fork();

    // Если создание дочернего процесса не удалось, выводим сообщение об ошибке и завершаем программу
    if(result < 0)
    {
        printf("Can\'t fork child\n");
        exit(-1);
    }
    // Если мы находимся в родительском процессе (result > 0)
    else if (result > 0)
    {
        // Закрываем входной конец канала, так как мы не будем читать из него
        close(fd[0]);

        // Записываем строку в выходной конец канала
        size = write(fd[1], "Hello, world!", 14);

        // Если запись не удалась или было записано не все, выводим сообщение об ошибке и завершаем программу
        if(size != 14){
            printf("Can\'t write all string to pipe\n");
            exit(-1);
        }

        // Закрываем выходной конец канала, так как мы больше не будем писать в него
        close(fd[1]);
        // Выводим сообщение о завершении родительского процесса
        printf("Parent exit\n");

    }
    // Если мы находимся в дочернем процессе (result == 0)
    else
    {
        // Закрываем выходной конец канала, так как мы не будем писать в него
        close(fd[1]);
        // Читаем строку из входного конца канала
        size = read(fd[0], resstring, 14);

        // Если чтение не удалось, выводим сообщение об ошибке и завершаем программу
        if(size < 0){
            printf("Can\'t read string from pipe\n");
            exit(-1);
        }

        // Выводим прочитанную строку и сообщение о завершении дочернего процесса
        printf("Child exit, resstring:%s\n", resstring);

        // Закрываем входной конец канала, так как мы больше не будем читать из него
        close(fd[0]);
    }

    return 0;
}